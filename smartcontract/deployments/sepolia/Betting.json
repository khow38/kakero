{
  "address": "0x67b0D4cDe60a5283aBDA77a52e9d2E3DB94be17a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_gameDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option1Name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option2Name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option1LeagueName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option2LeagueName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_matchDateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "gameFinished",
          "type": "bool"
        }
      ],
      "name": "Betting__ExecuteNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "BettingEnter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AmountOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AmountTwo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betOnOption1",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betOnOption2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkExecuteReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "readyToExecute",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "checkPlayerExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMatchDateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOption1LeagueName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOption1Name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOption2LeagueName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOption2Name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayerInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "oraclemsg",
          "type": "uint16"
        }
      ],
      "name": "performExecute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountBet",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "teamSelected",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_gameDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option1Name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option1LeagueName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option2Name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option2LeagueName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_matchDateTimestamp",
          "type": "uint256"
        }
      ],
      "name": "reopenGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x92a8d410ba2566a2663eeeae8cda1ebdedb932a000381896295ccc27125f6ef2",
  "receipt": {
    "to": null,
    "from": "0xa0cc0685d4fF6Fb0d4C293c2CaE63BC4ee8E216D",
    "contractAddress": "0x67b0D4cDe60a5283aBDA77a52e9d2E3DB94be17a",
    "transactionIndex": 65,
    "gasUsed": "2289763",
    "logsBloom": "0x
    "blockHash": "0x247ced96adb2bb4096c9bc7bf244b9e950c5b96d7427bad45b4bcf6078cb1c65",
    "transactionHash": "0x92a8d410ba2566a2663eeeae8cda1ebdedb932a000381896295ccc27125f6ef2",
    "logs": [],
    "blockNumber": 3487397,
    "cumulativeGasUsed": "7736749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Bet the winner, MSI 2023, May 16, 2023 12:00:00 PM",
    "G2 Esports",
    "BLG",
    "LEC",
    "LPL",
    "1684238400",
    "1000000000000000"
  ],
  "numDeployments": 18,
  "solcInputHash": "5ba677a5ed0783e3558f7dd768beb48d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gameDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option1Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option2Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option1LeagueName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option2LeagueName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_matchDateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gameFinished\",\"type\":\"bool\"}],\"name\":\"Betting__ExecuteNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"BettingEnter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmountOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betOnOption1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betOnOption2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkExecuteReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"readyToExecute\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkPlayerExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMatchDateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOption1LeagueName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOption1Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOption2LeagueName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOption2Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"oraclemsg\",\"type\":\"uint16\"}],\"name\":\"performExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBet\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"teamSelected\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gameDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option1Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option1LeagueName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option2Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option2LeagueName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_matchDateTimestamp\",\"type\":\"uint256\"}],\"name\":\"reopenGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yakou Hikoichi\",\"kind\":\"dev\",\"methods\":{\"checkExecuteReady()\":{\"details\":\"This is the function whether the execution of betting is ready or not they look for `readyToExecute` to return True. the following should be true for this to return true: 1. The time interval has passed between betting runs. 2. The Game is open. 3. The contract has ETH.\"},\"performExecute(uint16)\":{\"details\":\"Once `checkExecuteReady` is returning `true`, this function is called and it kicks off the winner.\"}},\"title\":\"A sample Betting Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAdmin()\":{\"notice\":\"Getter Functions \"}},\"notice\":\"This contract is for creating a sample betting contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BinaryBet.sol\":\"Betting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BinaryBet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/* Errors */\\nerror Betting__ExecuteNotNeeded(uint256 currentBalance, uint256 numPlayers, bool gameFinished);\\nerror Betting__TransferFailed();\\nerror Betting__BettingNotOpen();\\n\\n/**@title A sample Betting Contract\\n * @author Yakou Hikoichi\\n * * @notice This contract is for creating a sample betting contract\\n*/\\ncontract Betting {\\n\\n    // Betting Variables\\n    uint256 private minimumBet;\\n    uint256 private totalBetOne;\\n    uint256 private totalBetTwo;\\n    uint256 private startTimestamp;\\n    uint256 private matchDateTimestamp;\\n\\n    address payable private owner;\\n    address private admin;\\n    bool private gameFinished;\\n\\n    string private gameDescription;\\n\\n    string private option1Name;\\n    string private option2Name;\\n    string private option1LeagueName;\\n    string private option2LeagueName;\\n\\n    struct Player {\\n        uint256 amountBet;\\n        uint16 teamSelected;\\n    }\\n    // Address of the player and => the user info\\n    mapping(address => Player) public playerInfo;\\n    address payable[] private players;\\n    address payable[] private winners;\\n\\n    uint private commission = 5;\\n\\n    /* Events */\\n    event BettingEnter(address indexed player);\\n\\n    /* Functions */\\n    constructor(\\n      string memory _gameDescription,\\n      string memory _option1Name,\\n      string memory _option2Name,\\n      string memory _option1LeagueName,\\n      string memory _option2LeagueName,\\n      uint256 _matchDateTimestamp,\\n      uint256 entranceFee\\n    ) {\\n        minimumBet = entranceFee;         // 0.01 etherium\\n        gameFinished = false;\\n        startTimestamp = block.timestamp;\\n        matchDateTimestamp = _matchDateTimestamp;\\n        admin = msg.sender;\\n        gameDescription = _gameDescription;\\n        option1Name = _option1Name;\\n        option2Name = _option2Name;\\n        option1LeagueName = _option1LeagueName;\\n        option2LeagueName = _option2LeagueName;\\n        owner = payable(admin);\\n    }\\n\\n    function betOnOption1() public payable onlyBeforeMatchDate {\\n        //The first require is used to check if the player already exist\\n        require(!gameFinished);\\n        require(msg.value >= minimumBet, \\\"Insufficient bet amount\\\");\\n        require(!checkPlayerExists(msg.sender));\\n\\n        //We charge the commission of the betting\\n        uint256 betValue = (msg.value * (100 - commission)/100);\\n\\n        //We set the player informations : amount of the bet and selected team\\n        playerInfo[msg.sender].amountBet = betValue;\\n        playerInfo[msg.sender].teamSelected = 1;\\n\\n        //then we add the address of the player to the players array\\n        players.push(payable(msg.sender));\\n\\n        //at the end, we increment the stakes of the team selected with the player bet\\n        totalBetOne += betValue;\\n        emit BettingEnter(msg.sender);\\n    }\\n\\n    function betOnOption2() public payable onlyBeforeMatchDate {\\n        //The first require is used to check if the player already exist\\n        require(!gameFinished);\\n        require(msg.value >= minimumBet, \\\"Insufficient bet amount\\\");\\n        require(!checkPlayerExists(msg.sender));\\n\\n        //We charge the commission of the betting\\n        uint256 betValue = (msg.value * (100 - commission)/100);\\n\\n        //We set the player informations : amount of the bet and selected team\\n        playerInfo[msg.sender].amountBet = betValue;\\n        playerInfo[msg.sender].teamSelected = 2;\\n\\n        //then we add the address of the player to the players array\\n        players.push(payable(msg.sender));\\n\\n        //at the end, we increment the stakes of the team selected with the player bet\\n        totalBetTwo += betValue;\\n        emit BettingEnter(msg.sender);\\n    }\\n\\n    function distributePrizes(uint16 teamWinner) internal onlyAdmin {\\n\\n        uint256 LoserBet = 0; //This will take the value of all losers bet\\n        uint256 WinnerBet = 0; //This will take the value of all winners bet\\n        address add;\\n        uint256 bet;\\n        address payable playerAddress;\\n        //We loop through the player array to check who selected the winner team\\n        for(uint256 i = 0; i < players.length; i++){\\n            playerAddress = players[i];\\n            //If the player selected the winner team\\n            //We add his address to the winners array\\n            if(playerInfo[playerAddress].teamSelected == teamWinner){\\n                winners.push(playerAddress);\\n            }\\n        }\\n        //We define which bet sum is the Loser one and which one is the winner\\n        if (teamWinner == 1){\\n            LoserBet = totalBetTwo;\\n            WinnerBet = totalBetOne;\\n        }\\n        else{\\n            LoserBet = totalBetOne;\\n            WinnerBet = totalBetTwo;\\n        }\\n        //We loop through the array of winners, to give ethers to the winners\\n        for(uint256 j = 0; j < winners.length; j++){\\n            add = winners[j];\\n            bet = playerInfo[add].amountBet;\\n            uint256 prize = (bet*(10000+(LoserBet*10000/WinnerBet)))/10000;\\n            //Transfer the money to the user\\n            payable(winners[j]).transfer(prize);\\n        }\\n        owner.transfer(address(this).balance);\\n\\n        gameFinished = true;\\n\\n    }\\n\\n    /**\\n     * @dev This is the function whether the execution of betting is ready or not\\n     * they look for `readyToExecute` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between betting runs.\\n     * 2. The Game is open.\\n     * 3. The contract has ETH.\\n     */\\n    function checkExecuteReady()\\n        public\\n        view\\n        returns (bool readyToExecute)\\n    {\\n        bool isOpen = gameFinished == false;\\n        bool timePassed = ((block.timestamp - matchDateTimestamp) > 0);\\n        bool hasPlayers = players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        readyToExecute = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return readyToExecute;\\n    }\\n\\n    /**\\n     * @dev Once `checkExecuteReady` is returning `true`, this function is called\\n     * and it kicks off the winner.\\n     */\\n    function performExecute(\\n        uint16 oraclemsg\\n    ) external onlyAdmin onlyAfterMatchDate\\n    {\\n        bool readyToExecute = checkExecuteReady();\\n        // require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n        if (!readyToExecute) {\\n            revert Betting__ExecuteNotNeeded(\\n                address(this).balance,\\n                players.length,\\n                gameFinished\\n            );\\n        }\\n        // oracle engaged and redistribution of asset happens\\n        distributePrizes(oraclemsg);\\n    }\\n\\n\\n    /** Getter Functions */\\n    function getAdmin() public view returns (address)\\n    {\\n        return admin;\\n    }\\n\\n    function reopenGame( string memory _gameDescription\\n                       , string memory _option1Name\\n                       , string memory _option1LeagueName\\n                       , string memory _option2Name\\n                       , string memory _option2LeagueName\\n                       , uint256 _matchDateTimestamp)\\n                       public onlyAdmin onlyGameFinished\\n    {\\n\\n        // Delete all the players\\n        for (uint256 i = 0; i < players.length; i++){\\n            delete playerInfo[players[i]];\\n        }\\n        delete players; // Delete all the players array\\n        delete winners; // Delete all the winners array\\n        totalBetOne = 0;\\n        totalBetTwo = 0;\\n\\n        gameFinished = false;\\n        gameDescription = _gameDescription;\\n        option1Name = _option1Name;\\n        option1LeagueName = _option1LeagueName;\\n        option2Name = _option2Name;\\n        option2LeagueName = _option2LeagueName;\\n        matchDateTimestamp = _matchDateTimestamp;\\n        players = new address payable [](0);\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function getGameFinished() public view returns (bool) {\\n        return gameFinished;\\n    }\\n\\n    function checkPlayerExists(address player) public view returns (bool) {\\n      uint256 l = players.length;\\n      for(uint256 i = 0; i < l; i++){\\n         if(players[i] == player) return true;\\n      }\\n      return false;\\n    }\\n\\n    function AmountOne() public view returns(uint256){\\n       return totalBetOne;\\n    }\\n\\n    function getOption1Name() public view returns(string memory){\\n       return option1Name;\\n    }\\n\\n    function getOption1LeagueName() public view returns(string memory){\\n       return option1LeagueName;\\n    }\\n\\n    function AmountTwo() public view returns(uint256){\\n       return totalBetTwo;\\n    }\\n\\n    function getOption2Name() public view returns(string memory){\\n       return option2Name;\\n    }\\n\\n    function getOption2LeagueName() public view returns(string memory){\\n       return option2LeagueName;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return players.length;\\n    }\\n\\n    function getMatchDateTimestamp() public view returns (uint256) {\\n        return matchDateTimestamp;\\n    }\\n\\n    function getStartTimestamp() public view returns (uint256) {\\n        return startTimestamp;\\n    }\\n\\n    function getPlayerInfo(uint256 index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return minimumBet;\\n    }\\n\\n    function getCommissionRatio() public view returns (uint256) {\\n        return commission;\\n    }\\n\\n    modifier onlyGameFinished() {\\n        require(gameFinished, \\\"The unfinished game remained\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeforeMatchDate() {\\n        require(block.timestamp < matchDateTimestamp, \\\"The deadline has passed\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterMatchDate() {\\n        require(block.timestamp > matchDateTimestamp, \\\"The deadline has not yet passed\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0e42cb8f194bdda1fb04756ec039f526ac7967dc0d7fa9e2f5b1daf59a3292b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005600f553480156200001657600080fd5b5060405162002a6f38038062002a6f83398181016040528101906200003c919062000345565b806000819055506000600660146101000a81548160ff021916908315150217905550426003819055508160048190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660079081620000be9190620006d4565b508560089081620000d09190620006d4565b508460099081620000e29190620006d4565b5083600a9081620000f49190620006d4565b5082600b9081620001069190620006d4565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050620007bb565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001e08262000195565b810181811067ffffffffffffffff82111715620002025762000201620001a6565b5b80604052505050565b60006200021762000177565b9050620002258282620001d5565b919050565b600067ffffffffffffffff821115620002485762000247620001a6565b5b620002538262000195565b9050602081019050919050565b60005b838110156200028057808201518184015260208101905062000263565b60008484015250505050565b6000620002a36200029d846200022a565b6200020b565b905082815260208101848484011115620002c257620002c162000190565b5b620002cf84828562000260565b509392505050565b600082601f830112620002ef57620002ee6200018b565b5b8151620003018482602086016200028c565b91505092915050565b6000819050919050565b6200031f816200030a565b81146200032b57600080fd5b50565b6000815190506200033f8162000314565b92915050565b600080600080600080600060e0888a03121562000367576200036662000181565b5b600088015167ffffffffffffffff81111562000388576200038762000186565b5b620003968a828b01620002d7565b975050602088015167ffffffffffffffff811115620003ba57620003b962000186565b5b620003c88a828b01620002d7565b965050604088015167ffffffffffffffff811115620003ec57620003eb62000186565b5b620003fa8a828b01620002d7565b955050606088015167ffffffffffffffff8111156200041e576200041d62000186565b5b6200042c8a828b01620002d7565b945050608088015167ffffffffffffffff81111562000450576200044f62000186565b5b6200045e8a828b01620002d7565b93505060a0620004718a828b016200032e565b92505060c0620004848a828b016200032e565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004e657607f821691505b602082108103620004fc57620004fb6200049e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000527565b62000572868362000527565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005b5620005af620005a9846200030a565b6200058a565b6200030a565b9050919050565b6000819050919050565b620005d18362000594565b620005e9620005e082620005bc565b84845462000534565b825550505050565b600090565b62000600620005f1565b6200060d818484620005c6565b505050565b5b81811015620006355762000629600082620005f6565b60018101905062000613565b5050565b601f82111562000684576200064e8162000502565b620006598462000517565b8101602085101562000669578190505b62000681620006788562000517565b83018262000612565b50505b505050565b600082821c905092915050565b6000620006a96000198460080262000689565b1980831691505092915050565b6000620006c4838362000696565b9150826002028217905092915050565b620006df8262000493565b67ffffffffffffffff811115620006fb57620006fa620001a6565b5b620007078254620004cd565b6200071482828562000639565b600060209050601f8311600181146200074c576000841562000737578287015190505b620007438582620006b6565b865550620007b3565b601f1984166200075c8662000502565b60005b8281101562000786578489015182556001820191506020850194506020810190506200075f565b86831015620007a65784890151620007a2601f89168262000696565b8355505b6001600288020188555050505b505050505050565b6122a480620007cb6000396000f3fe60806040526004361061012a5760003560e01c80634996d51d116100ab578063777cd2471161006f578063777cd247146103b65780637dc6e841146103df578063c85398081461040a578063ea17532e14610414578063fd6673f514610451578063fdbe66671461047c5761012a565b80634996d51d146102cc5780634b114691146102f75780636573359214610335578063676f6474146103605780636e9960c31461038b5761012a565b80632aae3630116100f25780632aae3630146101e55780632b74e9bd146102105780632f9f65f61461023b5780633ca53bba146102665780634081d9161461028f5761012a565b806309bc33a71461012f5780630ca740401461015a5780631385f1a9146101645780631f89f25e1461018f57806327f0cbc0146101ba575b600080fd5b34801561013b57600080fd5b506101446104a7565b6040516101519190611655565b60405180910390f35b6101626104b0565b005b34801561017057600080fd5b506101796106f7565b6040516101869190611700565b60405180910390f35b34801561019b57600080fd5b506101a4610789565b6040516101b19190611655565b60405180910390f35b3480156101c657600080fd5b506101cf610793565b6040516101dc919061173d565b60405180910390f35b3480156101f157600080fd5b506101fa6107aa565b6040516102079190611700565b60405180910390f35b34801561021c57600080fd5b5061022561083c565b6040516102329190611655565b60405180910390f35b34801561024757600080fd5b50610250610846565b60405161025d9190611700565b60405180910390f35b34801561027257600080fd5b5061028d600480360381019061028891906117a6565b6108d8565b005b34801561029b57600080fd5b506102b660048036038101906102b19190611831565b610a1f565b6040516102c3919061173d565b60405180910390f35b3480156102d857600080fd5b506102e1610ad0565b6040516102ee9190611655565b60405180910390f35b34801561030357600080fd5b5061031e60048036038101906103199190611831565b610ada565b60405161032c92919061186d565b60405180910390f35b34801561034157600080fd5b5061034a610b0c565b6040516103579190611655565b60405180910390f35b34801561036c57600080fd5b50610375610b16565b604051610382919061173d565b60405180910390f35b34801561039757600080fd5b506103a0610b7e565b6040516103ad91906118a5565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d89190611a21565b610ba8565b005b3480156103eb57600080fd5b506103f4610e55565b6040516104019190611700565b60405180910390f35b610412610ee7565b005b34801561042057600080fd5b5061043b60048036038101906104369190611b3a565b61112e565b60405161044891906118a5565b60405180910390f35b34801561045d57600080fd5b50610466611176565b6040516104739190611655565b60405180910390f35b34801561048857600080fd5b50610491611183565b60405161049e9190611655565b60405180910390f35b60008054905090565b60045442106104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90611bb3565b60405180910390fd5b600660149054906101000a900460ff161561050e57600080fd5b600054341015610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a90611c1f565b60405180910390fd5b61055c33610a1f565b1561056657600080fd5b60006064600f5460646105799190611c6e565b346105849190611ca2565b61058e9190611d13565b905080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548161ffff021916908361ffff160217905550600d339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160008282546106aa9190611d44565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f7f47e4b864ee52d8ca461d379020be7e99ae801a152dde71193bdc651da8a7c060405160405180910390a250565b6060600a805461070690611da7565b80601f016020809104026020016040519081016040528092919081815260200182805461073290611da7565b801561077f5780601f106107545761010080835404028352916020019161077f565b820191906000526020600020905b81548152906001019060200180831161076257829003601f168201915b5050505050905090565b6000600354905090565b6000600660149054906101000a900460ff16905090565b6060600880546107b990611da7565b80601f01602080910402602001604051908101604052809291908181526020018280546107e590611da7565b80156108325780601f1061080757610100808354040283529160200191610832565b820191906000526020600020905b81548152906001019060200180831161081557829003601f168201915b5050505050905090565b6000600454905090565b6060600b805461085590611da7565b80601f016020809104026020016040519081016040528092919081815260200182805461088190611da7565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90611e4a565b60405180910390fd5b60045442116109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390611eb6565b60405180910390fd5b60006109b6610b16565b905080610a125747600d80549050600660149054906101000a900460ff166040517f0f724954000000000000000000000000000000000000000000000000000000008152600401610a0993929190611ed6565b60405180910390fd5b610a1b8261118d565b5050565b600080600d80549050905060005b81811015610ac4578373ffffffffffffffffffffffffffffffffffffffff16600d8281548110610a6057610a5f611f0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ab157600192505050610acb565b8080610abc90611f3c565b915050610a2d565b5060009150505b919050565b6000600154905090565b600c6020528060005260406000206000915090508060000154908060010160009054906101000a900461ffff16905082565b6000600254905090565b60008060001515600660149054906101000a900460ff16151514905060008060045442610b439190611c6e565b119050600080600d8054905011905060008047119050828015610b635750835b8015610b6c5750805b8015610b755750815b94505050505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f90611e4a565b60405180910390fd5b600660149054906101000a900460ff16610c87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7e90611fd0565b60405180910390fd5b60005b600d80549050811015610d4757600c6000600d8381548110610caf57610cae611f0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549061ffff021916905550508080610d3f90611f3c565b915050610c8a565b50600d6000610d569190611574565b600e6000610d649190611574565b600060018190555060006002819055506000600660146101000a81548160ff0219169083151502179055508560079081610d9e919061219c565b508460089081610dae919061219c565b5083600a9081610dbe919061219c565b508260099081610dce919061219c565b5081600b9081610dde919061219c565b5080600481905550600067ffffffffffffffff811115610e0157610e006118ca565b5b604051908082528060200260200182016040528015610e2f5781602001602082028036833780820191505090505b50600d9080519060200190610e45929190611595565b5042600381905550505050505050565b606060098054610e6490611da7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9090611da7565b8015610edd5780601f10610eb257610100808354040283529160200191610edd565b820191906000526020600020905b815481529060010190602001808311610ec057829003601f168201915b5050505050905090565b6004544210610f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2290611bb3565b60405180910390fd5b600660149054906101000a900460ff1615610f4557600080fd5b600054341015610f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8190611c1f565b60405180910390fd5b610f9333610a1f565b15610f9d57600080fd5b60006064600f546064610fb09190611c6e565b34610fbb9190611ca2565b610fc59190611d13565b905080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506002600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548161ffff021916908361ffff160217905550600d339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008282546110e19190611d44565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f7f47e4b864ee52d8ca461d379020be7e99ae801a152dde71193bdc651da8a7c060405160405180910390a250565b6000600d828154811061114457611143611f0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600d80549050905090565b6000600f54905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490611e4a565b60405180910390fd5b600080600080600080600090505b600d8054905081101561134f57600d818154811061124c5761124b611f0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508661ffff16600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900461ffff1661ffff160361133c57600e829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808061134790611f3c565b91505061122b565b5060018661ffff160361136b5760025494506001549350611376565b600154945060025493505b60005b600e805490508110156114e757600e818154811061139a57611399611f0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549250600061271086612710896114209190611ca2565b61142a9190611d13565b6127106114379190611d44565b856114429190611ca2565b61144c9190611d13565b9050600e828154811061146257611461611f0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156114d2573d6000803e3d6000fd5b505080806114df90611f3c565b915050611379565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611550573d6000803e3d6000fd5b506001600660146101000a81548160ff021916908315150217905550505050505050565b5080546000825590600052602060002090810190611592919061161f565b50565b82805482825590600052602060002090810192821561160e579160200282015b8281111561160d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906115b5565b5b50905061161b919061161f565b5090565b5b80821115611638576000816000905550600101611620565b5090565b6000819050919050565b61164f8161163c565b82525050565b600060208201905061166a6000830184611646565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116aa57808201518184015260208101905061168f565b60008484015250505050565b6000601f19601f8301169050919050565b60006116d282611670565b6116dc818561167b565b93506116ec81856020860161168c565b6116f5816116b6565b840191505092915050565b6000602082019050818103600083015261171a81846116c7565b905092915050565b60008115159050919050565b61173781611722565b82525050565b6000602082019050611752600083018461172e565b92915050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b6117838161176c565b811461178e57600080fd5b50565b6000813590506117a08161177a565b92915050565b6000602082840312156117bc576117bb611762565b5b60006117ca84828501611791565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117fe826117d3565b9050919050565b61180e816117f3565b811461181957600080fd5b50565b60008135905061182b81611805565b92915050565b60006020828403121561184757611846611762565b5b60006118558482850161181c565b91505092915050565b6118678161176c565b82525050565b60006040820190506118826000830185611646565b61188f602083018461185e565b9392505050565b61189f816117f3565b82525050565b60006020820190506118ba6000830184611896565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611902826116b6565b810181811067ffffffffffffffff82111715611921576119206118ca565b5b80604052505050565b6000611934611758565b905061194082826118f9565b919050565b600067ffffffffffffffff8211156119605761195f6118ca565b5b611969826116b6565b9050602081019050919050565b82818337600083830152505050565b600061199861199384611945565b61192a565b9050828152602081018484840111156119b4576119b36118c5565b5b6119bf848285611976565b509392505050565b600082601f8301126119dc576119db6118c0565b5b81356119ec848260208601611985565b91505092915050565b6119fe8161163c565b8114611a0957600080fd5b50565b600081359050611a1b816119f5565b92915050565b60008060008060008060c08789031215611a3e57611a3d611762565b5b600087013567ffffffffffffffff811115611a5c57611a5b611767565b5b611a6889828a016119c7565b965050602087013567ffffffffffffffff811115611a8957611a88611767565b5b611a9589828a016119c7565b955050604087013567ffffffffffffffff811115611ab657611ab5611767565b5b611ac289828a016119c7565b945050606087013567ffffffffffffffff811115611ae357611ae2611767565b5b611aef89828a016119c7565b935050608087013567ffffffffffffffff811115611b1057611b0f611767565b5b611b1c89828a016119c7565b92505060a0611b2d89828a01611a0c565b9150509295509295509295565b600060208284031215611b5057611b4f611762565b5b6000611b5e84828501611a0c565b91505092915050565b7f54686520646561646c696e652068617320706173736564000000000000000000600082015250565b6000611b9d60178361167b565b9150611ba882611b67565b602082019050919050565b60006020820190508181036000830152611bcc81611b90565b9050919050565b7f496e73756666696369656e742062657420616d6f756e74000000000000000000600082015250565b6000611c0960178361167b565b9150611c1482611bd3565b602082019050919050565b60006020820190508181036000830152611c3881611bfc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c798261163c565b9150611c848361163c565b9250828203905081811115611c9c57611c9b611c3f565b5b92915050565b6000611cad8261163c565b9150611cb88361163c565b9250828202611cc68161163c565b91508282048414831517611cdd57611cdc611c3f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d1e8261163c565b9150611d298361163c565b925082611d3957611d38611ce4565b5b828204905092915050565b6000611d4f8261163c565b9150611d5a8361163c565b9250828201905080821115611d7257611d71611c3f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611dbf57607f821691505b602082108103611dd257611dd1611d78565b5b50919050565b7f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000611e3460218361167b565b9150611e3f82611dd8565b604082019050919050565b60006020820190508181036000830152611e6381611e27565b9050919050565b7f54686520646561646c696e6520686173206e6f74207965742070617373656400600082015250565b6000611ea0601f8361167b565b9150611eab82611e6a565b602082019050919050565b60006020820190508181036000830152611ecf81611e93565b9050919050565b6000606082019050611eeb6000830186611646565b611ef86020830185611646565b611f05604083018461172e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611f478261163c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f7957611f78611c3f565b5b600182019050919050565b7f54686520756e66696e69736865642067616d652072656d61696e656400000000600082015250565b6000611fba601c8361167b565b9150611fc582611f84565b602082019050919050565b60006020820190508181036000830152611fe981611fad565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026120527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612015565b61205c8683612015565b95508019841693508086168417925050509392505050565b6000819050919050565b600061209961209461208f8461163c565b612074565b61163c565b9050919050565b6000819050919050565b6120b38361207e565b6120c76120bf826120a0565b848454612022565b825550505050565b600090565b6120dc6120cf565b6120e78184846120aa565b505050565b5b8181101561210b576121006000826120d4565b6001810190506120ed565b5050565b601f8211156121505761212181611ff0565b61212a84612005565b81016020851015612139578190505b61214d61214585612005565b8301826120ec565b50505b505050565b600082821c905092915050565b600061217360001984600802612155565b1980831691505092915050565b600061218c8383612162565b9150826002028217905092915050565b6121a582611670565b67ffffffffffffffff8111156121be576121bd6118ca565b5b6121c88254611da7565b6121d382828561210f565b600060209050601f83116001811461220657600084156121f4578287015190505b6121fe8582612180565b865550612266565b601f19841661221486611ff0565b60005b8281101561223c57848901518255600182019150602085019450602081019050612217565b868310156122595784890151612255601f891682612162565b8355505b6001600288020188555050505b50505050505056fea26469706673582212208d47981415655bb55ba5c7da1152c2de882d98c8e71a799a1ac75a35eb5628a464736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Yakou Hikoichi",
    "kind": "dev",
    "methods": {
      "checkExecuteReady()": {
        "details": "This is the function whether the execution of betting is ready or not they look for `readyToExecute` to return True. the following should be true for this to return true: 1. The time interval has passed between betting runs. 2. The Game is open. 3. The contract has ETH."
      },
      "performExecute(uint16)": {
        "details": "Once `checkExecuteReady` is returning `true`, this function is called and it kicks off the winner."
      }
    },
    "title": "A sample Betting Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAdmin()": {
        "notice": "Getter Functions "
      }
    },
    "notice": "This contract is for creating a sample betting contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "minimumBet",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 18,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "totalBetOne",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "totalBetTwo",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "matchDateTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 28,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 30,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "gameFinished",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 32,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "gameDescription",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 34,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "option1Name",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 36,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "option2Name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 38,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "option1LeagueName",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 40,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "option2LeagueName",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 50,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "playerInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Player)45_storage)"
      },
      {
        "astId": 53,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "players",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "winners",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 59,
        "contract": "contracts/BinaryBet.sol:Betting",
        "label": "commission",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Player)45_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Betting.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)45_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Player)45_storage": {
        "encoding": "inplace",
        "label": "struct Betting.Player",
        "members": [
          {
            "astId": 42,
            "contract": "contracts/BinaryBet.sol:Betting",
            "label": "amountBet",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/BinaryBet.sol:Betting",
            "label": "teamSelected",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}